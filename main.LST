C51 COMPILER V9.01   MAIN                                                                  10/27/2016 21:30:48 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN obj\Debug\main.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.exe ..\main.c OBJECT(obj\Debug\main.obj) LARGE DEBUG OBJECTEXTEND INCDIR(C:\Kei
                    -l\C51\inc)

line level    source

   1          #include<reg51.h>
   2          #include"motor.h"
   3          #include"sensor.h"
   4          #include"timer.h"
   5          
   6          //static clock_t time_flag=0;//warning only in left and block
   7          
   8          
   9          void run()
  10          {
  11   1          static clock_t time_right;
  12   1          static clock_t time_left;
  13   1          static clock_t time_tmp;
  14   1          static unsigned char flag_right=1;
  15   1          static unsigned char flag_left=1;
  16   1          static unsigned char state=0;
  17   1          static char v_left=100,v_right=100;
  18   1          static unsigned int cnt_left=10,cnt_right=10;
  19   1      
  20   1          switch(state_edge())
  21   1          {
  22   2          case STRAIGHT:
  23   2              state=1;
  24   2              if(should_swerve_left()==SWERVE_LEFT)
  25   2              {
  26   3                  v_left-=50;
  27   3                  v_left-=50;
  28   3              }
  29   2              set_velocity(v_left,v_right);
  30   2              break;
  31   2          case DEVIATION_OF_LEFT:
  32   2              state=2;
  33   2      
  34   2              set_velocity(100,20);
  35   2              if(flag_left==1)
  36   2              {
  37   3                  flag_left=0;cnt_left++;
  38   3                  time_left=clock();
  39   3              }
  40   2              break;
  41   2          case DEVIATION_OF_RIGHT:
  42   2              state=3;
  43   2      
  44   2              set_velocity(20,100);
  45   2              if(flag_right==1)
  46   2              {
  47   3                  flag_right=0;cnt_right++;
  48   3                  time_right=clock();
  49   3              }
  50   2              break;
  51   2          case DEVIATION_OF_VERTICAL:
  52   2              state=4;
  53   2              set_velocity(100,100);
  54   2              //sleep(60);
C51 COMPILER V9.01   MAIN                                                                  10/27/2016 21:30:48 PAGE 2   

  55   2              break;
  56   2          default:
  57   2              state=5;
  58   2              set_velocity(30,30);
  59   2          }
  60   1          /*调整*/
  61   1          if(flag_left==0&&state!=2)
  62   1          {
  63   2              flag_left=1;
  64   2              set_velocity(20,100);
  65   2              sleep(((clock()-time_left)>>2)&0x3f);
  66   2          }
  67   1          if(flag_right==0&&state!=3)
  68   1          {
  69   2              flag_right=1;
  70   2              set_velocity(100,20);
  71   2              sleep(((clock()-time_right)>>2)&0x3f);
  72   2          }
  73   1          /**/
  74   1          /*急调*/
  75   1      
  76   1          if(flag_right==0&&should_swerve_left()!=SWERVE_LEFT&&clock()-time_right>300)
  77   1          {
  78   2              time_tmp=clock();
  79   2              set_forward_or_backward(BACKWARD,FORWARD);
  80   2              while(state_edge()==DEVIATION_OF_RIGHT&&clock()-time_tmp<100)
  81   2                  set_velocity(20,80);
  82   2              set_forward_or_backward(FORWARD,FORWARD);
  83   2          }
  84   1      
  85   1          if(flag_left==0&&should_swerve_right()!=SWERVE_RIGHT&&clock()-time_left>300)
  86   1          {
  87   2              time_tmp=clock();
  88   2              set_forward_or_backward(FORWARD,BACKWARD);
  89   2              while(state_edge()==DEVIATION_OF_LEFT&&clock()-time_tmp<100)
  90   2                  set_velocity(80,20);
  91   2              set_forward_or_backward(FORWARD,FORWARD);
  92   2          }
  93   1          /**/
  94   1      
  95   1          if(cnt_left>cnt_right)
  96   1          {
  97   2              v_left=100;
  98   2              v_right=100*cnt_right/cnt_left;
  99   2          }
 100   1          else
 101   1          {
 102   2              v_right=100;
 103   2              v_left=100*cnt_left/cnt_right;
 104   2          }
 105   1      }
 106          
 107          void run_swerve_left()
 108          {
 109   1          //static clock_t time=0;
 110   1          //static unsigned char flag=1;
 111   1          if(should_swerve_left()==SWERVE_LEFT&&should_swerve_right()==NOSWERVE/*&&flag==1*/)
 112   1          {
 113   2              //flag=0;
 114   2              //time=clock();
 115   2              set_velocity(80,80);
 116   2              set_forward_or_backward(BACKWARD,FORWARD);
C51 COMPILER V9.01   MAIN                                                                  10/27/2016 21:30:48 PAGE 3   

 117   2              while(state_edge()==DEVIATION_OF_RIGHT&&/*should_swerve_left()==SWERVE_LEFT&&*/
 118   2                      should_swerve_right()==NOSWERVE)
 119   2              {}
 120   2              set_forward_or_backward(FORWARD,FORWARD);
 121   2          }
 122   1          /*
 123   1          if(clock()-time>0)//不可关闭
 124   1          {
 125   1              flag=1;
 126   1          }*/
 127   1      }
 128          
 129          void run_swerve_right()
 130          {
 131   1          if(should_swerve_right()==SWERVE_RIGHT)
 132   1          {
 133   2              while(should_swerve_right()==SWERVE_RIGHT/*&&state_edge()!=DEVIATION_OF_RIGHT*/)
 134   2              {
 135   3                  if(should_swerve_left()==SWERVE_LEFT)
 136   3                  {
 137   4                      goto here;
 138   4                  }
 139   3      
 140   3                  if(state_edge()==DEVIATION_OF_RIGHT)
 141   3                      break;
 142   3                  here:
 143   3                  set_forward_or_backward(FORWARD,BACKWARD);
 144   3                  //while(state_edge()!=DEVIATION_OF_RIGHT)
 145   3                  set_velocity(80,80);
 146   3              }
 147   2              set_forward_or_backward(FORWARD,FORWARD);
 148   2          }
 149   1      }
 150          void run_swerve_block()
 151          {
 152   1          //static unsigned char flag=1;
 153   1          //static clock_t time;
 154   1          static clock_t time_open=0;
 155   1          if(right_sensor()==HAVE_BLOCK||right_sensor2()==HAVE_BLOCK)
 156   1          {
 157   2              if(clock()-time_open<1400)
 158   2                  return;
 159   2              set_velocity(50,50);
 160   2              sleep(50);
 161   2              if(right_sensor()!=HAVE_BLOCK&&right_sensor2()!=HAVE_BLOCK)
 162   2                  return ;
 163   2              set_forward_or_backward(FORWARD,BACKWARD);
 164   2              while(right_sensor()==HAVE_BLOCK||right_sensor2()==HAVE_BLOCK)
 165   2                  set_velocity(100,100);
 166   2              while(left_sensor()==NONE)
 167   2                  set_velocity(100,100);
 168   2              //set_forward_or_backward(FORWARD,FORWARD);
 169   2              while(left_sensor()==HAVE_BLOCK)
 170   2                  set_velocity(100,100);
 171   2              //sleep(10);
 172   2              set_forward_or_backward(FORWARD,FORWARD);
 173   2      
 174   2              while(should_go_block()==SWERVE_BLOCK&&
 175   2                    should_swerve_right()!=SWERVE_RIGHT)
 176   2                  set_velocity(100,100);
 177   2      
 178   2              while(/*should_swerve_right()!=SWERVE_RIGHT&&*/
C51 COMPILER V9.01   MAIN                                                                  10/27/2016 21:30:48 PAGE 4   

 179   2                    state_edge()==DEVIATION_OF_RIGHT)
 180   2              {
 181   3                  while(should_go_block()==GO_BLOCK&&should_swerve_right()!=SWERVE_RIGHT&&
 182   3                        state_edge()==DEVIATION_OF_RIGHT)
 183   3                      set_velocity(70,70);
 184   3                  //time=clock();
 185   3                  while(should_go_block()==SWERVE_BLOCK&&/*should_swerve_right()!=SWERVE_RIGHT&&*/
 186   3                        state_edge()==DEVIATION_OF_RIGHT)
 187   3                  {
 188   4                      set_forward_or_backward(BACKWARD,FORWARD);
 189   4                      set_velocity(50,60);
 190   4                  }
 191   3                  set_forward_or_backward(FORWARD,FORWARD);
 192   3      
 193   3              }/*
 194   2              set_forward_or_backward(BACKWARD,BACKWARD);
 195   2              set_velocity(50,100);
 196   2              sleep(100);
 197   2              set_forward_or_backward(FORWARD,FORWARD);
 198   2              time=clock();
 199   2              while(should_swerve_right()==SWERVE_RIGHT)
 200   2              {
 201   2                  set_forward_or_backward(FORWARD,BACKWARD);
 202   2                  set_velocity(50,50);
 203   2              }
 204   2              //set_forward_or_backward(FORWARD,FORWARD);
 205   2              time=clock()-time;
 206   2              set_forward_or_backward(FORWARD,BACKWARD);
 207   2              set_velocity(50,50);
 208   2              sleep(time>>2);
 209   2              set_forward_or_backward(FORWARD,FORWARD);
 210   2              set_velocity(40,100);
 211   2              sleep(time>>2);*/
 212   2      
 213   2              time_open=clock();
 214   2          }
 215   1          return ;
 216   1      
 217   1      }
 218          void run_swerve_small_block()
 219          {
 220   1          if(have_block1()==HAVE_BLOCK/*&&should_swerve_left()==SWERVE_LEFT*/)
 221   1          {
 222   2              set_velocity(80,80);
 223   2              sleep(20);
 224   2              if(have_block1()!=HAVE_BLOCK)
 225   2                  return ;
 226   2              set_forward_or_backward(FORWARD,BACKWARD);
 227   2              while(have_block1()==HAVE_BLOCK)
 228   2                  set_velocity(100,50);
 229   2              set_forward_or_backward(FORWARD,FORWARD);
 230   2              while(should_go_block()!=GO_BLOCK)
 231   2                  set_velocity(100,100);
 232   2      
 233   2              while(/*should_swerve_right()!=SWERVE_RIGHT&&*/
 234   2                    state_edge()==DEVIATION_OF_RIGHT)
 235   2              {
 236   3                  while(should_go_block()==GO_BLOCK&&/*should_swerve_right()!=SWERVE_RIGHT&&*/
 237   3                        state_edge()==DEVIATION_OF_RIGHT)
 238   3                      set_velocity(70,70);
 239   3                  //time=clock();
 240   3                  while(should_go_block()==SWERVE_BLOCK&&/*should_swerve_right()!=SWERVE_RIGHT&&*/
C51 COMPILER V9.01   MAIN                                                                  10/27/2016 21:30:48 PAGE 5   

 241   3                        state_edge()==DEVIATION_OF_RIGHT)
 242   3                  {
 243   4                      set_forward_or_backward(BACKWARD,FORWARD);
 244   4                      set_velocity(50,60);
 245   4                  }
 246   3                  set_forward_or_backward(FORWARD,FORWARD);
 247   3                  /*
 248   3                  while(state_edge()==DEVIATION_OF_VERTICAL)
 249   3                  {
 250   3                      set_forward_or_backward(FORWARD,BACKWARD);
 251   3                      set_velocity(50,50);
 252   3                  }
 253   3                  set_forward_or_backward(FORWARD,FORWARD);*/
 254   3              }
 255   2          }
 256   1      }
 257          
 258          int main()
 259          {
 260   1          unsigned char line_cnt;
 261   1      
 262   1          set_velocity(0,0);
 263   1          TMOD=0x10|0x01;
 264   1          init_motor();
 265   1          initTimer();
 266   1      
 267   1          set_forward_or_backward(FORWARD,FORWARD);
 268   1          EA=1;
 269   1          sleep(500);
 270   1          initInter0();
 271   1          line_cnt=get_black_line_cnt();
 272   1          for(;get_black_line_cnt()-line_cnt<2;)
 273   1          {
 274   2              run_swerve_small_block();
 275   2              run_swerve_right();
 276   2              run_swerve_left();
 277   2              run();
 278   2              run_swerve_block();
 279   2              run_swerve_right();
 280   2              run_swerve_left();
 281   2          }
 282   1          set_velocity(0,0);
 283   1          for(;;){}
 284   1      
 285   1          return 0;
 286   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1301    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     25       1
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
